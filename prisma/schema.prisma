generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                  @id @default(cuid())
  email               String                  @unique
  username            String                  @unique
  password            String
  name                String?
  avatar              String?
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
  groupsOwned         Group[]                 @relation("GroupOwner")
  groupMembers        GroupMember[]
  habits              Habit[]
  habitEntries        HabitEntry[]
  createdSharedHabits SharedGroupHabit[]
  sharedHabitEntries  SharedGroupHabitEntry[]
}

model Habit {
  id           String       @id @default(cuid())
  name         String
  description  String?
  color        String       @default("#3B82F6")
  frequency    String       @default("daily")
  target       Int          @default(1)
  unit         String?
  isActive     Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  userId       String
  groupHabits  GroupHabit[]
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  habitEntries HabitEntry[]
}

model HabitEntry {
  id        String   @id @default(cuid())
  date      DateTime
  value     Int      @default(1)
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  habitId   String
  habit     Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, habitId, date])
}

model Group {
  id           String             @id @default(cuid())
  name         String
  description  String?
  inviteCode   String             @unique @default(cuid())
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  ownerId      String
  owner        User               @relation("GroupOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  groupHabits  GroupHabit[]
  members      GroupMember[]
  sharedHabits SharedGroupHabit[]
}

model GroupMember {
  id       String    @id @default(cuid())
  role     GroupRole @default(Member)
  joinedAt DateTime  @default(now())
  userId   String
  groupId  String
  group    Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
}

model GroupHabit {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  groupId   String
  habitId   String
  habit     Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, habitId])
}

model SharedGroupHabit {
  id          String                  @id @default(cuid())
  name        String
  description String?
  color       String                  @default("#3B82F6")
  frequency   String                  @default("daily")
  target      Int                     @default(1)
  unit        String?
  isActive    Boolean                 @default(true)
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  groupId     String
  createdById String
  createdBy   User                    @relation(fields: [createdById], references: [id])
  group       Group                   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  entries     SharedGroupHabitEntry[]

  @@unique([groupId, name])
}

model SharedGroupHabitEntry {
  id            String           @id @default(cuid())
  date          DateTime
  value         Int              @default(1)
  notes         String?
  completed     Boolean          @default(false)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  userId        String
  sharedHabitId String
  sharedHabit   SharedGroupHabit @relation(fields: [sharedHabitId], references: [id], onDelete: Cascade)
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, sharedHabitId, date])
}

enum GroupRole {
  Member
  Admin
}
